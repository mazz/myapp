"""Initial migration

Revision ID: 7cee08e39b99
Revises: 
Create Date: 2016-01-23 15:26:56.564216

"""

# revision identifiers, used by Alembic.
revision = '7cee08e39b99'
down_revision = None
branch_labels = None
depends_on = None

import datetime
import websauna.system.model.columns

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('group',
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.Column('updated_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.Column('group_data', postgresql.JSONB(), nullable=True),
    sa.Column('description', sa.UnicodeText(), nullable=True),
    sa.Column('name', sa.Unicode(length=50), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_group')),
    sa.UniqueConstraint('name', name=op.f('uq_group_name')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_table('question',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('question_text', sa.String(length=256), nullable=True),
    sa.Column('published_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_question'))
    )
    op.create_table('user_activation',
    sa.Column('created_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.Column('updated_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.Column('expires_at', websauna.system.model.columns.UTCDateTime(), nullable=False),
    sa.Column('created_by', sa.Unicode(length=30), nullable=False),
    sa.Column('valid_until', sa.DateTime(), nullable=False),
    sa.Column('code', sa.Unicode(length=30), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_activation')),
    sa.UniqueConstraint('code', name=op.f('uq_user_activation_code')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_table('choice',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('choice_text', sa.String(length=256), nullable=True),
    sa.Column('votes', sa.Integer(), nullable=True),
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], name=op.f('fk_choice_question_id_question')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_choice'))
    )
    op.create_table('users',
    sa.Column('username', sa.String(length=256), nullable=True),
    sa.Column('password', sa.String(length=256), nullable=True),
    sa.Column('salt', sa.String(length=256), nullable=True),
    sa.Column('created_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.Column('updated_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.Column('uuid', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('activated_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('last_login_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.Column('last_login_ip', postgresql.INET(), nullable=True),
    sa.Column('user_data', postgresql.JSONB(), nullable=True),
    sa.Column('last_auth_sensitive_operation_at', websauna.system.model.columns.UTCDateTime(), nullable=True),
    sa.Column('registered_date', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=False),
    sa.Column('email', sa.Unicode(length=100), nullable=False),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('security_code', sa.Unicode(length=256), nullable=True),
    sa.Column('activation_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['activation_id'], ['user_activation.id'], name=op.f('fk_users_activation_id_user_activation')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email')),
    sa.UniqueConstraint('security_code', name=op.f('uq_users_security_code')),
    sa.UniqueConstraint('username', name=op.f('uq_users_username')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    op.create_table('usergroup',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name=op.f('fk_usergroup_group_id_group')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_usergroup_user_id_users'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_usergroup')),
    mysql_charset='utf8',
    mysql_engine='InnoDB'
    )
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('usergroup')
    op.drop_table('users')
    op.drop_table('choice')
    op.drop_table('user_activation')
    op.drop_table('question')
    op.drop_table('group')
    ### end Alembic commands ###
